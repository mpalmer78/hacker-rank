{"version":3,"file":"romanToInt.js","sourceRoot":"","sources":["../romanToInt.ts"],"names":[],"mappings":"AAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAE7B,SAAS,UAAU,CAAC,CAAS;IACzB,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC9B,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE;YAC3C,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;YACpB,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE;gBACtB,OAAO,GAAG,OAAO,GAAG,IAAI,CAAC;gBACzB,CAAC,EAAE,CAAC;aACP;SACJ;QACD,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;KAC1C;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,SAAS,eAAe,CAAC,OAAe;IACpC,MAAM,MAAM,GAAG,cAAc,EAAE,CAAC;IAChC,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,YAAY,CAAC,OAAe;IACjC,OAAO,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,cAAc,CAAC,OAAe;IACnC,OAAO,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACvD,CAAC;AAED,SAAS,cAAc;IACnB,MAAM,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAC;IACzC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACnB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACpB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACpB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACrB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACrB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACtB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACpB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACpB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACtB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACtB,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["console.log(romanToInt('I'));\r\n\r\nfunction romanToInt(s: string): number {\r\n    const numbers: number[] = [];\r\n    for(let i = 0; i < s.length; i++) {\r\n        let numeral = s[i];\r\n        if (isSubtractor(numeral) && s.length - 1 > i) {\r\n            const next = s[i+1];\r\n            if (isSubtractable(next)) {\r\n                numeral = numeral + next;\r\n                i++;\r\n            }\r\n        }\r\n        numbers.push(numeralToNumber(numeral));\r\n    }\r\n    return numbers.reduce((prev, curr) => prev + curr);\r\n}\r\n\r\nfunction numeralToNumber(numeral: string): number {\r\n    const romans = getRomanValues();\r\n    return romans.get(numeral) ?? 0;\r\n}\r\n\r\nfunction isSubtractor(numeral: string): boolean {\r\n    return ['I','X','C'].includes(numeral);\r\n}\r\n\r\nfunction isSubtractable(numeral: string): boolean {\r\n    return ['X','V','L','C','D','M'].includes(numeral);\r\n}\r\n\r\nfunction getRomanValues(): Map<string, number> {\r\n    const romans = new Map<string, number>();\r\n    romans.set('I', 1);\r\n    romans.set('V', 5);\r\n    romans.set('X', 10);\r\n    romans.set('L', 50);\r\n    romans.set('C', 100);\r\n    romans.set('D', 500);\r\n    romans.set('M', 1000);\r\n    romans.set('IV', 4);\r\n    romans.set('IX', 9);\r\n    romans.set('XL', 40);\r\n    romans.set('XC', 90);\r\n    romans.set('CD', 400);\r\n    romans.set('CM', 900);\r\n    return romans;\r\n}"]}