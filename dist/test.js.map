{"version":3,"file":"test.js","sourceRoot":"","sources":["../test.ts"],"names":[],"mappings":"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","sourcesContent":["class BinarySearchTree {\r\n    constructor(numbers) {\r\n        this.root = null;\r\n        this.buildTree(numbers);\r\n    }\r\n\r\n    buildTree(numbers) {\r\n        if (numbers.length === 0) return;\r\n\r\n        // Find the middle element of the array and use it as the root of the tree\r\n        const middle = Math.floor(numbers.length / 2);\r\n        this.root = new Node(numbers[middle]);\r\n\r\n        // Create the left and right subtrees by recursively building the tree\r\n        this.root.left = new BinarySearchTree(numbers.slice(0, middle));\r\n        this.root.right = new BinarySearchTree(numbers.slice(middle + 1));\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nclass Node {\r\n    constructor(value, left = null, right = null) {\r\n        this.value = value;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nfunction printTree(node, parent, depth) {\r\n    // Output the right subtree\r\n    if (node.right) {\r\n        // Output the edge from the current node to its right child\r\n        console.log(' '.repeat(depth * 2) + '└' + '─'.repeat(2) + node.right.value);\r\n\r\n        // Print the right subtree with the current node as its parent\r\n        printTree(node.right, node, depth + 1);\r\n    }\r\n\r\n    // Output the current node\r\n    if (parent) {\r\n        // Output the edge from the parent node to the current node\r\n        console.log(' '.repeat((depth - 1) * 2) + '└' + '─'.repeat(2) + node.value);\r\n    } else {\r\n        // This is the root node, so no edge is needed\r\n        console.log(' '.repeat(depth * 2) + node.value);\r\n    }\r\n\r\n    // Output the left subtree\r\n    if (node.left) {\r\n        // Output the edge from the current node to its left child\r\n        console.log(' '.repeat(depth * 2) + '└' + '─'.repeat(2) + node.left.value);\r\n\r\n        // Print the left subtree with the current node as its parent\r\n        printTree(node.left, node, depth + 1);\r\n    }\r\n}\r\n\r\nfunction printTreeWithEdges(node, depth) {\r\n    // Output the right subtree\r\n    if (node.right) {\r\n        printTree(node.right, depth + 1);\r\n    }\r\n\r\n    // Output the current node and its edges\r\n    console.log(' '.repeat(depth * 2) + node.value);\r\n    if (node.left && node.right) {\r\n        console.log(' '.repeat(depth * 2 + String(node.value).length) + '/ \\\\');\r\n        console.log(' '.repeat(depth * 2 + String(node.value).length) + '-' + '-'.repeat(String(node.value).length - 1));\r\n    } else if (node.left) {\r\n        console.log(' '.repeat(depth * 2 + String(node.value).length) + '/');\r\n    } else if (node.right) {\r\n        console.log(' '.repeat(depth * 2 + String(node.value).length) + '\\\\');\r\n        console.log(' '.repeat(depth * 2 + String(node.value).length) + '-' + '-'.repeat(String(node.value).length - 1));\r\n    }\r\n\r\n    // Output the left subtree\r\n    if (node.left) {\r\n        printTree(node.left, depth + 1);\r\n    }\r\n}\r\n\r\nconst numbers = [1,2,3,4,5,6,7,8,9,10];\r\nconst tree = new BinarySearchTree(numbers);\r\nprintTreeWithEdges(tree, 0);"]}